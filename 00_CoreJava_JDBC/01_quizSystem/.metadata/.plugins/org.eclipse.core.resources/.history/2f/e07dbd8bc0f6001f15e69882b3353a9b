package com.quiztaker.main.serviceImpl;

import com.quiztaker.main.entity.User;
import com.quiztaker.main.exception.CredentialsMismatchedException;
import com.quiztaker.main.exception.EntityAlredyPresentException;
import com.quiztaker.main.repo.UserRepository;
import com.quiztaker.main.serviceI.UserServiceI;

public class UserServiceImpl implements UserServiceI {
	// object for UserRepository
	UserRepository userRepository = new UserRepository();
	
	// blogic for signUpUser
	@Override
	public User signUpUser(User userToAdd) {
		// taking user object to return
		User savedUser = new User();
		
		try {
			// before saving/adding userToAdd check it's emailid and contactno , if found in db already then throw error else save
			// find user by provided email id , calling findByUserEmailId method of UserRepository
			User foundUserByEmailId = this.userRepository.findByUserEmailId(userToAdd.getUserEmailId());
			
			// find user by provided contact no, calling findByUserContactNo method of UserRepository
			User foundUserByContactNo = this.userRepository.findByUserContactNo(userToAdd.getUserContactNo());
			
			// checking and doing further operations
			// if foundUserByEmailId and foundUserByContactNo is null then save userToAdd, if foundUserByEmailId or/and foundUserByContactNo are not null then throw exception
			// for exception
			if(foundUserByEmailId!=null) {
				throw new EntityAlredyPresentException("User With Provided Email Id Is Already Present.");
			}
			else if(foundUserByContactNo!=null) {
				throw new EntityAlredyPresentException("User With Provided Contact No. Is Already Present.");
			}
			else {
				// save userToAdd
				// calling save method of UserRepository to save user
				savedUser = this.userRepository.save(userToAdd);
				
				return savedUser;
			}
		}
		catch(EntityAlredyPresentException e) {
			System.err.println("\nEntityAlredyPresentException : "+e.getMessage());
		}
		catch(Exception e) {
			System.err.println("\nException : "+e.getMessage());
		}
		
		return null;
	}
	
	// blogic for authUser
	@Override
	public Boolean authUser(String userUsername, String userPassword) {
		// taking variable to return 
		Boolean isUserAuthenticated = false;
		
		try {
			// for authenticate user, we need to find user by username ie. here username is useremailid , so find user having provided useremailid
			// calling findByUserEmailId method of UserRepository
			User foundUser = this.userRepository.findByUserEmailId(userUsername);
			
			// checking 
			if(foundUser==null) {
				// if not found
				throw new CredentialsMismatchedException("User With Provided EmailId Not Found.");
			}
			else if(!foundUser.getUserPassword().equals(userPassword)) {
				// foundUser's password is not same as provided password
				throw new CredentialsMismatchedException("Wrong Password.");
			}
			else {
				// all good then do login/authenticate
				isUserAuthenticated = true;
			}
		}catch(CredentialsMismatchedException e) {
			System.err.println("\nCredentialsMismatchedException : "+e.getMessage());
		}catch(Exception e) {
			System.err.println("\nException : "+e.getMessage());
		}
		
		// return isUserAuthenticated 
		return isUserAuthenticated;
	}

	// blogic for getUserByUsername
	@Override
	public User getUserByUsername(String username) {
		// getting user having provided username
		User foundUser = this.userRepository.findByUserEmailId(username);
		return null;
	}

}
